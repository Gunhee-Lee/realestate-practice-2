# Makefile.in generated by automake 1.16.3 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2020 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

VPATH = @srcdir@
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
@AUTO_EXAMPLES_TRUE@bin_PROGRAMS = $(am__EXEEXT_1)
@AUTO_EXAMPLES_TRUE@TESTS = $(am__EXEEXT_1)
@AUTO_EXAMPLES_FALSE@noinst_PROGRAMS = $(am__EXEEXT_1)
subdir = Examples
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
	$(top_srcdir)/acinclude.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/ql/config.hpp
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__EXEEXT_1 = BasketLosses/BasketLosses$(EXEEXT) \
	BermudanSwaption/BermudanSwaption$(EXEEXT) \
	Bonds/Bonds$(EXEEXT) CallableBonds/CallableBonds$(EXEEXT) \
	CDS/CDS$(EXEEXT) ConvertibleBonds/ConvertibleBonds$(EXEEXT) \
	CVAIRS/CVAIRS$(EXEEXT) \
	DiscreteHedging/DiscreteHedging$(EXEEXT) \
	EquityOption/EquityOption$(EXEEXT) \
	FittedBondCurve/FittedBondCurve$(EXEEXT) FRA/FRA$(EXEEXT) \
	Gaussian1dModels/Gaussian1dModels$(EXEEXT) \
	GlobalOptimizer/GlobalOptimizer$(EXEEXT) \
	LatentModel/LatentModel$(EXEEXT) \
	MarketModels/MarketModels$(EXEEXT) \
	MultidimIntegral/MultidimIntegral$(EXEEXT) \
	MulticurveBootstrapping/MulticurveBootstrapping$(EXEEXT) \
	Replication/Replication$(EXEEXT) Repo/Repo$(EXEEXT)
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS) $(noinst_PROGRAMS)
am__dirstamp = $(am__leading_dot)dirstamp
am_BasketLosses_BasketLosses_OBJECTS =  \
	BasketLosses/BasketLosses.$(OBJEXT)
BasketLosses_BasketLosses_OBJECTS =  \
	$(am_BasketLosses_BasketLosses_OBJECTS)
am__DEPENDENCIES_1 =
am__DEPENDENCIES_2 = ../ql/libQuantLib.la $(am__DEPENDENCIES_1)
BasketLosses_BasketLosses_DEPENDENCIES = $(am__DEPENDENCIES_2)
AM_V_lt = $(am__v_lt_@AM_V@)
am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
am__v_lt_0 = --silent
am__v_lt_1 = 
am_BermudanSwaption_BermudanSwaption_OBJECTS =  \
	BermudanSwaption/BermudanSwaption.$(OBJEXT)
BermudanSwaption_BermudanSwaption_OBJECTS =  \
	$(am_BermudanSwaption_BermudanSwaption_OBJECTS)
BermudanSwaption_BermudanSwaption_DEPENDENCIES =  \
	$(am__DEPENDENCIES_2)
am_Bonds_Bonds_OBJECTS = Bonds/Bonds.$(OBJEXT)
Bonds_Bonds_OBJECTS = $(am_Bonds_Bonds_OBJECTS)
Bonds_Bonds_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_CDS_CDS_OBJECTS = CDS/CDS.$(OBJEXT)
CDS_CDS_OBJECTS = $(am_CDS_CDS_OBJECTS)
CDS_CDS_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_CVAIRS_CVAIRS_OBJECTS = CVAIRS/CVAIRS.$(OBJEXT)
CVAIRS_CVAIRS_OBJECTS = $(am_CVAIRS_CVAIRS_OBJECTS)
CVAIRS_CVAIRS_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_CallableBonds_CallableBonds_OBJECTS =  \
	CallableBonds/CallableBonds.$(OBJEXT)
CallableBonds_CallableBonds_OBJECTS =  \
	$(am_CallableBonds_CallableBonds_OBJECTS)
CallableBonds_CallableBonds_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_ConvertibleBonds_ConvertibleBonds_OBJECTS =  \
	ConvertibleBonds/ConvertibleBonds.$(OBJEXT)
ConvertibleBonds_ConvertibleBonds_OBJECTS =  \
	$(am_ConvertibleBonds_ConvertibleBonds_OBJECTS)
ConvertibleBonds_ConvertibleBonds_DEPENDENCIES =  \
	$(am__DEPENDENCIES_2)
am_DiscreteHedging_DiscreteHedging_OBJECTS =  \
	DiscreteHedging/DiscreteHedging.$(OBJEXT)
DiscreteHedging_DiscreteHedging_OBJECTS =  \
	$(am_DiscreteHedging_DiscreteHedging_OBJECTS)
DiscreteHedging_DiscreteHedging_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_EquityOption_EquityOption_OBJECTS =  \
	EquityOption/EquityOption.$(OBJEXT)
EquityOption_EquityOption_OBJECTS =  \
	$(am_EquityOption_EquityOption_OBJECTS)
EquityOption_EquityOption_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_FRA_FRA_OBJECTS = FRA/FRA.$(OBJEXT)
FRA_FRA_OBJECTS = $(am_FRA_FRA_OBJECTS)
FRA_FRA_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_FittedBondCurve_FittedBondCurve_OBJECTS =  \
	FittedBondCurve/FittedBondCurve.$(OBJEXT)
FittedBondCurve_FittedBondCurve_OBJECTS =  \
	$(am_FittedBondCurve_FittedBondCurve_OBJECTS)
FittedBondCurve_FittedBondCurve_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_Gaussian1dModels_Gaussian1dModels_OBJECTS =  \
	Gaussian1dModels/Gaussian1dModels.$(OBJEXT)
Gaussian1dModels_Gaussian1dModels_OBJECTS =  \
	$(am_Gaussian1dModels_Gaussian1dModels_OBJECTS)
Gaussian1dModels_Gaussian1dModels_DEPENDENCIES =  \
	$(am__DEPENDENCIES_2)
am_GlobalOptimizer_GlobalOptimizer_OBJECTS =  \
	GlobalOptimizer/GlobalOptimizer.$(OBJEXT)
GlobalOptimizer_GlobalOptimizer_OBJECTS =  \
	$(am_GlobalOptimizer_GlobalOptimizer_OBJECTS)
GlobalOptimizer_GlobalOptimizer_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_LatentModel_LatentModel_OBJECTS =  \
	LatentModel/LatentModel.$(OBJEXT)
LatentModel_LatentModel_OBJECTS =  \
	$(am_LatentModel_LatentModel_OBJECTS)
LatentModel_LatentModel_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_MarketModels_MarketModels_OBJECTS =  \
	MarketModels/MarketModels.$(OBJEXT)
MarketModels_MarketModels_OBJECTS =  \
	$(am_MarketModels_MarketModels_OBJECTS)
MarketModels_MarketModels_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_MulticurveBootstrapping_MulticurveBootstrapping_OBJECTS =  \
	MulticurveBootstrapping/MulticurveBootstrapping.$(OBJEXT)
MulticurveBootstrapping_MulticurveBootstrapping_OBJECTS =  \
	$(am_MulticurveBootstrapping_MulticurveBootstrapping_OBJECTS)
MulticurveBootstrapping_MulticurveBootstrapping_DEPENDENCIES =  \
	$(am__DEPENDENCIES_2)
am_MultidimIntegral_MultidimIntegral_OBJECTS =  \
	MultidimIntegral/MultidimIntegral.$(OBJEXT)
MultidimIntegral_MultidimIntegral_OBJECTS =  \
	$(am_MultidimIntegral_MultidimIntegral_OBJECTS)
MultidimIntegral_MultidimIntegral_DEPENDENCIES =  \
	$(am__DEPENDENCIES_2)
am_Replication_Replication_OBJECTS =  \
	Replication/Replication.$(OBJEXT)
Replication_Replication_OBJECTS =  \
	$(am_Replication_Replication_OBJECTS)
Replication_Replication_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_Repo_Repo_OBJECTS = Repo/Repo.$(OBJEXT)
Repo_Repo_OBJECTS = $(am_Repo_Repo_OBJECTS)
Repo_Repo_DEPENDENCIES = $(am__DEPENDENCIES_2)
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = 
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__maybe_remake_depfiles = depfiles
am__depfiles_remade = BasketLosses/$(DEPDIR)/BasketLosses.Po \
	BermudanSwaption/$(DEPDIR)/BermudanSwaption.Po \
	Bonds/$(DEPDIR)/Bonds.Po CDS/$(DEPDIR)/CDS.Po \
	CVAIRS/$(DEPDIR)/CVAIRS.Po \
	CallableBonds/$(DEPDIR)/CallableBonds.Po \
	ConvertibleBonds/$(DEPDIR)/ConvertibleBonds.Po \
	DiscreteHedging/$(DEPDIR)/DiscreteHedging.Po \
	EquityOption/$(DEPDIR)/EquityOption.Po FRA/$(DEPDIR)/FRA.Po \
	FittedBondCurve/$(DEPDIR)/FittedBondCurve.Po \
	Gaussian1dModels/$(DEPDIR)/Gaussian1dModels.Po \
	GlobalOptimizer/$(DEPDIR)/GlobalOptimizer.Po \
	LatentModel/$(DEPDIR)/LatentModel.Po \
	MarketModels/$(DEPDIR)/MarketModels.Po \
	MulticurveBootstrapping/$(DEPDIR)/MulticurveBootstrapping.Po \
	MultidimIntegral/$(DEPDIR)/MultidimIntegral.Po \
	Replication/$(DEPDIR)/Replication.Po Repo/$(DEPDIR)/Repo.Po
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_@AM_V@)
am__v_CXX_ = $(am__v_CXX_@AM_DEFAULT_V@)
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_@AM_V@)
am__v_CXXLD_ = $(am__v_CXXLD_@AM_DEFAULT_V@)
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = $(BasketLosses_BasketLosses_SOURCES) \
	$(BermudanSwaption_BermudanSwaption_SOURCES) \
	$(Bonds_Bonds_SOURCES) $(CDS_CDS_SOURCES) \
	$(CVAIRS_CVAIRS_SOURCES) \
	$(CallableBonds_CallableBonds_SOURCES) \
	$(ConvertibleBonds_ConvertibleBonds_SOURCES) \
	$(DiscreteHedging_DiscreteHedging_SOURCES) \
	$(EquityOption_EquityOption_SOURCES) $(FRA_FRA_SOURCES) \
	$(FittedBondCurve_FittedBondCurve_SOURCES) \
	$(Gaussian1dModels_Gaussian1dModels_SOURCES) \
	$(GlobalOptimizer_GlobalOptimizer_SOURCES) \
	$(LatentModel_LatentModel_SOURCES) \
	$(MarketModels_MarketModels_SOURCES) \
	$(MulticurveBootstrapping_MulticurveBootstrapping_SOURCES) \
	$(MultidimIntegral_MultidimIntegral_SOURCES) \
	$(Replication_Replication_SOURCES) $(Repo_Repo_SOURCES)
DIST_SOURCES = $(BasketLosses_BasketLosses_SOURCES) \
	$(BermudanSwaption_BermudanSwaption_SOURCES) \
	$(Bonds_Bonds_SOURCES) $(CDS_CDS_SOURCES) \
	$(CVAIRS_CVAIRS_SOURCES) \
	$(CallableBonds_CallableBonds_SOURCES) \
	$(ConvertibleBonds_ConvertibleBonds_SOURCES) \
	$(DiscreteHedging_DiscreteHedging_SOURCES) \
	$(EquityOption_EquityOption_SOURCES) $(FRA_FRA_SOURCES) \
	$(FittedBondCurve_FittedBondCurve_SOURCES) \
	$(Gaussian1dModels_Gaussian1dModels_SOURCES) \
	$(GlobalOptimizer_GlobalOptimizer_SOURCES) \
	$(LatentModel_LatentModel_SOURCES) \
	$(MarketModels_MarketModels_SOURCES) \
	$(MulticurveBootstrapping_MulticurveBootstrapping_SOURCES) \
	$(MultidimIntegral_MultidimIntegral_SOURCES) \
	$(Replication_Replication_SOURCES) $(Repo_Repo_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__tty_colors_dummy = \
  mgn= red= grn= lgn= blu= brg= std=; \
  am__color_tests=no
am__tty_colors = { \
  $(am__tty_colors_dummy); \
  if test "X$(AM_COLOR_TESTS)" = Xno; then \
    am__color_tests=no; \
  elif test "X$(AM_COLOR_TESTS)" = Xalways; then \
    am__color_tests=yes; \
  elif test "X$$TERM" != Xdumb && { test -t 1; } 2>/dev/null; then \
    am__color_tests=yes; \
  fi; \
  if test $$am__color_tests = yes; then \
    red='[0;31m'; \
    grn='[0;32m'; \
    lgn='[1;32m'; \
    blu='[1;34m'; \
    mgn='[0;35m'; \
    brg='[1m'; \
    std='[m'; \
  fi; \
}
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__recheck_rx = ^[ 	]*:recheck:[ 	]*
am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*
am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*
# A command that, given a newline-separated list of test names on the
# standard input, print the name of the tests that are to be re-run
# upon "make recheck".
am__list_recheck_tests = $(AWK) '{ \
  recheck = 1; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
        { \
          if ((getline line2 < ($$0 ".log")) < 0) \
	    recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[nN][Oo]/) \
        { \
          recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[yY][eE][sS]/) \
        { \
          break; \
        } \
    }; \
  if (recheck) \
    print $$0; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# A command that, given a newline-separated list of test names on the
# standard input, create the global log from their .trs and .log files.
am__create_global_log = $(AWK) ' \
function fatal(msg) \
{ \
  print "fatal: making $@: " msg | "cat >&2"; \
  exit 1; \
} \
function rst_section(header) \
{ \
  print header; \
  len = length(header); \
  for (i = 1; i <= len; i = i + 1) \
    printf "="; \
  printf "\n\n"; \
} \
{ \
  copy_in_global_log = 1; \
  global_test_result = "RUN"; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
         fatal("failed to read from " $$0 ".trs"); \
      if (line ~ /$(am__global_test_result_rx)/) \
        { \
          sub("$(am__global_test_result_rx)", "", line); \
          sub("[ 	]*$$", "", line); \
          global_test_result = line; \
        } \
      else if (line ~ /$(am__copy_in_global_log_rx)[nN][oO]/) \
        copy_in_global_log = 0; \
    }; \
  if (copy_in_global_log) \
    { \
      rst_section(global_test_result ": " $$0); \
      while ((rc = (getline line < ($$0 ".log"))) != 0) \
      { \
        if (rc < 0) \
          fatal("failed to read from " $$0 ".log"); \
        print line; \
      }; \
      printf "\n"; \
    }; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# Restructured Text title.
am__rst_title = { sed 's/.*/   &   /;h;s/./=/g;p;x;s/ *$$//;p;g' && echo; }
# Solaris 10 'make', and several other traditional 'make' implementations,
# pass "-e" to $(SHELL), and POSIX 2008 even requires this.  Work around it
# by disabling -e (using the XSI extension "set +e") if it's set.
am__sh_e_setup = case $$- in *e*) set +e;; esac
# Default flags passed to test drivers.
am__common_driver_flags = \
  --color-tests "$$am__color_tests" \
  --enable-hard-errors "$$am__enable_hard_errors" \
  --expect-failure "$$am__expect_failure"
# To be inserted before the command running the test.  Creates the
# directory for the log if needed.  Stores in $dir the directory
# containing $f, in $tst the test, in $log the log.  Executes the
# developer- defined test setup AM_TESTS_ENVIRONMENT (if any), and
# passes TESTS_ENVIRONMENT.  Set up options for the wrapper that
# will run the test scripts (or their associated LOG_COMPILER, if
# thy have one).
am__check_pre = \
$(am__sh_e_setup);					\
$(am__vpath_adj_setup) $(am__vpath_adj)			\
$(am__tty_colors);					\
srcdir=$(srcdir); export srcdir;			\
case "$@" in						\
  */*) am__odir=`echo "./$@" | sed 's|/[^/]*$$||'`;;	\
    *) am__odir=.;; 					\
esac;							\
test "x$$am__odir" = x"." || test -d "$$am__odir" 	\
  || $(MKDIR_P) "$$am__odir" || exit $$?;		\
if test -f "./$$f"; then dir=./;			\
elif test -f "$$f"; then dir=;				\
else dir="$(srcdir)/"; fi;				\
tst=$$dir$$f; log='$@'; 				\
if test -n '$(DISABLE_HARD_ERRORS)'; then		\
  am__enable_hard_errors=no; 				\
else							\
  am__enable_hard_errors=yes; 				\
fi; 							\
case " $(XFAIL_TESTS) " in				\
  *[\ \	]$$f[\ \	]* | *[\ \	]$$dir$$f[\ \	]*) \
    am__expect_failure=yes;;				\
  *)							\
    am__expect_failure=no;;				\
esac; 							\
$(AM_TESTS_ENVIRONMENT) $(TESTS_ENVIRONMENT)
# A shell command to get the names of the tests scripts with any registered
# extension removed (i.e., equivalently, the names of the test logs, with
# the '.log' extension removed).  The result is saved in the shell variable
# '$bases'.  This honors runtime overriding of TESTS and TEST_LOGS.  Sadly,
# we cannot use something simpler, involving e.g., "$(TEST_LOGS:.log=)",
# since that might cause problem with VPATH rewrites for suffix-less tests.
# See also 'test-harness-vpath-rewrite.sh' and 'test-trs-basic.sh'.
am__set_TESTS_bases = \
  bases='$(TEST_LOGS)'; \
  bases=`for i in $$bases; do echo $$i; done | sed 's/\.log$$//'`; \
  bases=`echo $$bases`
AM_TESTSUITE_SUMMARY_HEADER = ' for $(PACKAGE_STRING)'
RECHECK_LOGS = $(TEST_LOGS)
AM_RECURSIVE_TARGETS = check recheck
TEST_SUITE_LOG = test-suite.log
TEST_EXTENSIONS = @EXEEXT@ .test
LOG_DRIVER = $(SHELL) $(top_srcdir)/config/test-driver
LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)
am__set_b = \
  case '$@' in \
    */*) \
      case '$*' in \
        */*) b='$*';; \
          *) b=`echo '$@' | sed 's/\.log$$//'`; \
       esac;; \
    *) \
      b='$*';; \
  esac
am__test_logs1 = $(TESTS:=.log)
am__test_logs2 = $(am__test_logs1:@EXEEXT@.log=.log)
TEST_LOGS = $(am__test_logs2:.test.log=.log)
TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)/config/test-driver
TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \
	$(TEST_LOG_FLAGS)
am__DIST_COMMON = $(srcdir)/Makefile.in $(top_srcdir)/config/depcomp \
	$(top_srcdir)/config/test-driver
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
BOOST_INCLUDE = @BOOST_INCLUDE@
BOOST_INTERPROCESS_LIB = @BOOST_INTERPROCESS_LIB@
BOOST_LIB = @BOOST_LIB@
BOOST_THREAD_LIB = @BOOST_THREAD_LIB@
BOOST_UNIT_TEST_LIB = @BOOST_UNIT_TEST_LIB@
BOOST_UNIT_TEST_MAIN_CXXFLAGS = @BOOST_UNIT_TEST_MAIN_CXXFLAGS@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DLLTOOL = @DLLTOOL@
DOXYGEN = @DOXYGEN@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
DVIPS = @DVIPS@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EMACS = @EMACS@
EMACSLOADPATH = @EMACSLOADPATH@
EXEEXT = @EXEEXT@
FGREP = @FGREP@
GREP = @GREP@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LATEX = @LATEX@
LD = @LD@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LIPO = @LIPO@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
LT_SYS_LIBRARY_PATH = @LT_SYS_LIBRARY_PATH@
MAKEINDEX = @MAKEINDEX@
MAKEINFO = @MAKEINFO@
MANIFEST_TOOL = @MANIFEST_TOOL@
MKDIR_P = @MKDIR_P@
NM = @NM@
NMEDIT = @NMEDIT@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
OPENMP_CXXFLAGS = @OPENMP_CXXFLAGS@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PDFLATEX = @PDFLATEX@
RANLIB = @RANLIB@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
VERSION = @VERSION@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
lispdir = @lispdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
AM_CPPFLAGS = -I${top_builddir} -I${top_srcdir}
EXAMPLES = \
    BasketLosses/BasketLosses \
    BermudanSwaption/BermudanSwaption \
    Bonds/Bonds \
    CallableBonds/CallableBonds \
    CDS/CDS \
    ConvertibleBonds/ConvertibleBonds \
    CVAIRS/CVAIRS \
    DiscreteHedging/DiscreteHedging \
    EquityOption/EquityOption \
    FittedBondCurve/FittedBondCurve \
    FRA/FRA \
    Gaussian1dModels/Gaussian1dModels \
    GlobalOptimizer/GlobalOptimizer \
    LatentModel/LatentModel \
    MarketModels/MarketModels \
    MultidimIntegral/MultidimIntegral \
    MulticurveBootstrapping/MulticurveBootstrapping \
    Replication/Replication \
    Repo/Repo

LDADDS = ../ql/libQuantLib.la ${BOOST_THREAD_LIB}
BasketLosses_BasketLosses_SOURCES = BasketLosses/BasketLosses.cpp
BasketLosses_BasketLosses_LDADD = $(LDADDS)
BermudanSwaption_BermudanSwaption_SOURCES = BermudanSwaption/BermudanSwaption.cpp
BermudanSwaption_BermudanSwaption_LDADD = $(LDADDS)
Bonds_Bonds_SOURCES = Bonds/Bonds.cpp
Bonds_Bonds_LDADD = $(LDADDS)
CallableBonds_CallableBonds_SOURCES = CallableBonds/CallableBonds.cpp
CallableBonds_CallableBonds_LDADD = $(LDADDS)
CDS_CDS_SOURCES = CDS/CDS.cpp
CDS_CDS_LDADD = $(LDADDS)
ConvertibleBonds_ConvertibleBonds_SOURCES = ConvertibleBonds/ConvertibleBonds.cpp
ConvertibleBonds_ConvertibleBonds_LDADD = $(LDADDS)
CVAIRS_CVAIRS_SOURCES = CVAIRS/CVAIRS.cpp
CVAIRS_CVAIRS_LDADD = $(LDADDS)
DiscreteHedging_DiscreteHedging_SOURCES = DiscreteHedging/DiscreteHedging.cpp
DiscreteHedging_DiscreteHedging_LDADD = $(LDADDS)
EquityOption_EquityOption_SOURCES = EquityOption/EquityOption.cpp
EquityOption_EquityOption_LDADD = $(LDADDS)
FRA_FRA_SOURCES = FRA/FRA.cpp
FRA_FRA_LDADD = $(LDADDS)
FittedBondCurve_FittedBondCurve_SOURCES = FittedBondCurve/FittedBondCurve.cpp
FittedBondCurve_FittedBondCurve_LDADD = $(LDADDS)
Gaussian1dModels_Gaussian1dModels_SOURCES = Gaussian1dModels/Gaussian1dModels.cpp
Gaussian1dModels_Gaussian1dModels_LDADD = $(LDADDS)
GlobalOptimizer_GlobalOptimizer_SOURCES = GlobalOptimizer/GlobalOptimizer.cpp
GlobalOptimizer_GlobalOptimizer_LDADD = $(LDADDS)
LatentModel_LatentModel_SOURCES = LatentModel/LatentModel.cpp
LatentModel_LatentModel_LDADD = $(LDADDS)
MarketModels_MarketModels_SOURCES = MarketModels/MarketModels.cpp
MarketModels_MarketModels_LDADD = $(LDADDS)
MultidimIntegral_MultidimIntegral_SOURCES = MultidimIntegral/MultidimIntegral.cpp
MultidimIntegral_MultidimIntegral_LDADD = $(LDADDS)
MulticurveBootstrapping_MulticurveBootstrapping_SOURCES = MulticurveBootstrapping/MulticurveBootstrapping.cpp
MulticurveBootstrapping_MulticurveBootstrapping_LDADD = $(LDADDS)
Replication_Replication_SOURCES = Replication/Replication.cpp
Replication_Replication_LDADD = $(LDADDS)
Repo_Repo_SOURCES = Repo/Repo.cpp
Repo_Repo_LDADD = $(LDADDS)
EXTRA_DIST = CMakeLists.txt README.txt
all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .log .o .obj .test .test$(EXEEXT) .trs
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign Examples/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign Examples/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	 || test -f $$p1 \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

clean-noinstPROGRAMS:
	@list='$(noinst_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
BasketLosses/$(am__dirstamp):
	@$(MKDIR_P) BasketLosses
	@: > BasketLosses/$(am__dirstamp)
BasketLosses/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) BasketLosses/$(DEPDIR)
	@: > BasketLosses/$(DEPDIR)/$(am__dirstamp)
BasketLosses/BasketLosses.$(OBJEXT): BasketLosses/$(am__dirstamp) \
	BasketLosses/$(DEPDIR)/$(am__dirstamp)

BasketLosses/BasketLosses$(EXEEXT): $(BasketLosses_BasketLosses_OBJECTS) $(BasketLosses_BasketLosses_DEPENDENCIES) $(EXTRA_BasketLosses_BasketLosses_DEPENDENCIES) BasketLosses/$(am__dirstamp)
	@rm -f BasketLosses/BasketLosses$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(BasketLosses_BasketLosses_OBJECTS) $(BasketLosses_BasketLosses_LDADD) $(LIBS)
BermudanSwaption/$(am__dirstamp):
	@$(MKDIR_P) BermudanSwaption
	@: > BermudanSwaption/$(am__dirstamp)
BermudanSwaption/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) BermudanSwaption/$(DEPDIR)
	@: > BermudanSwaption/$(DEPDIR)/$(am__dirstamp)
BermudanSwaption/BermudanSwaption.$(OBJEXT):  \
	BermudanSwaption/$(am__dirstamp) \
	BermudanSwaption/$(DEPDIR)/$(am__dirstamp)

BermudanSwaption/BermudanSwaption$(EXEEXT): $(BermudanSwaption_BermudanSwaption_OBJECTS) $(BermudanSwaption_BermudanSwaption_DEPENDENCIES) $(EXTRA_BermudanSwaption_BermudanSwaption_DEPENDENCIES) BermudanSwaption/$(am__dirstamp)
	@rm -f BermudanSwaption/BermudanSwaption$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(BermudanSwaption_BermudanSwaption_OBJECTS) $(BermudanSwaption_BermudanSwaption_LDADD) $(LIBS)
Bonds/$(am__dirstamp):
	@$(MKDIR_P) Bonds
	@: > Bonds/$(am__dirstamp)
Bonds/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) Bonds/$(DEPDIR)
	@: > Bonds/$(DEPDIR)/$(am__dirstamp)
Bonds/Bonds.$(OBJEXT): Bonds/$(am__dirstamp) \
	Bonds/$(DEPDIR)/$(am__dirstamp)

Bonds/Bonds$(EXEEXT): $(Bonds_Bonds_OBJECTS) $(Bonds_Bonds_DEPENDENCIES) $(EXTRA_Bonds_Bonds_DEPENDENCIES) Bonds/$(am__dirstamp)
	@rm -f Bonds/Bonds$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(Bonds_Bonds_OBJECTS) $(Bonds_Bonds_LDADD) $(LIBS)
CDS/$(am__dirstamp):
	@$(MKDIR_P) CDS
	@: > CDS/$(am__dirstamp)
CDS/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) CDS/$(DEPDIR)
	@: > CDS/$(DEPDIR)/$(am__dirstamp)
CDS/CDS.$(OBJEXT): CDS/$(am__dirstamp) CDS/$(DEPDIR)/$(am__dirstamp)

CDS/CDS$(EXEEXT): $(CDS_CDS_OBJECTS) $(CDS_CDS_DEPENDENCIES) $(EXTRA_CDS_CDS_DEPENDENCIES) CDS/$(am__dirstamp)
	@rm -f CDS/CDS$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(CDS_CDS_OBJECTS) $(CDS_CDS_LDADD) $(LIBS)
CVAIRS/$(am__dirstamp):
	@$(MKDIR_P) CVAIRS
	@: > CVAIRS/$(am__dirstamp)
CVAIRS/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) CVAIRS/$(DEPDIR)
	@: > CVAIRS/$(DEPDIR)/$(am__dirstamp)
CVAIRS/CVAIRS.$(OBJEXT): CVAIRS/$(am__dirstamp) \
	CVAIRS/$(DEPDIR)/$(am__dirstamp)

CVAIRS/CVAIRS$(EXEEXT): $(CVAIRS_CVAIRS_OBJECTS) $(CVAIRS_CVAIRS_DEPENDENCIES) $(EXTRA_CVAIRS_CVAIRS_DEPENDENCIES) CVAIRS/$(am__dirstamp)
	@rm -f CVAIRS/CVAIRS$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(CVAIRS_CVAIRS_OBJECTS) $(CVAIRS_CVAIRS_LDADD) $(LIBS)
CallableBonds/$(am__dirstamp):
	@$(MKDIR_P) CallableBonds
	@: > CallableBonds/$(am__dirstamp)
CallableBonds/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) CallableBonds/$(DEPDIR)
	@: > CallableBonds/$(DEPDIR)/$(am__dirstamp)
CallableBonds/CallableBonds.$(OBJEXT): CallableBonds/$(am__dirstamp) \
	CallableBonds/$(DEPDIR)/$(am__dirstamp)

CallableBonds/CallableBonds$(EXEEXT): $(CallableBonds_CallableBonds_OBJECTS) $(CallableBonds_CallableBonds_DEPENDENCIES) $(EXTRA_CallableBonds_CallableBonds_DEPENDENCIES) CallableBonds/$(am__dirstamp)
	@rm -f CallableBonds/CallableBonds$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(CallableBonds_CallableBonds_OBJECTS) $(CallableBonds_CallableBonds_LDADD) $(LIBS)
ConvertibleBonds/$(am__dirstamp):
	@$(MKDIR_P) ConvertibleBonds
	@: > ConvertibleBonds/$(am__dirstamp)
ConvertibleBonds/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) ConvertibleBonds/$(DEPDIR)
	@: > ConvertibleBonds/$(DEPDIR)/$(am__dirstamp)
ConvertibleBonds/ConvertibleBonds.$(OBJEXT):  \
	ConvertibleBonds/$(am__dirstamp) \
	ConvertibleBonds/$(DEPDIR)/$(am__dirstamp)

ConvertibleBonds/ConvertibleBonds$(EXEEXT): $(ConvertibleBonds_ConvertibleBonds_OBJECTS) $(ConvertibleBonds_ConvertibleBonds_DEPENDENCIES) $(EXTRA_ConvertibleBonds_ConvertibleBonds_DEPENDENCIES) ConvertibleBonds/$(am__dirstamp)
	@rm -f ConvertibleBonds/ConvertibleBonds$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(ConvertibleBonds_ConvertibleBonds_OBJECTS) $(ConvertibleBonds_ConvertibleBonds_LDADD) $(LIBS)
DiscreteHedging/$(am__dirstamp):
	@$(MKDIR_P) DiscreteHedging
	@: > DiscreteHedging/$(am__dirstamp)
DiscreteHedging/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) DiscreteHedging/$(DEPDIR)
	@: > DiscreteHedging/$(DEPDIR)/$(am__dirstamp)
DiscreteHedging/DiscreteHedging.$(OBJEXT):  \
	DiscreteHedging/$(am__dirstamp) \
	DiscreteHedging/$(DEPDIR)/$(am__dirstamp)

DiscreteHedging/DiscreteHedging$(EXEEXT): $(DiscreteHedging_DiscreteHedging_OBJECTS) $(DiscreteHedging_DiscreteHedging_DEPENDENCIES) $(EXTRA_DiscreteHedging_DiscreteHedging_DEPENDENCIES) DiscreteHedging/$(am__dirstamp)
	@rm -f DiscreteHedging/DiscreteHedging$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(DiscreteHedging_DiscreteHedging_OBJECTS) $(DiscreteHedging_DiscreteHedging_LDADD) $(LIBS)
EquityOption/$(am__dirstamp):
	@$(MKDIR_P) EquityOption
	@: > EquityOption/$(am__dirstamp)
EquityOption/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) EquityOption/$(DEPDIR)
	@: > EquityOption/$(DEPDIR)/$(am__dirstamp)
EquityOption/EquityOption.$(OBJEXT): EquityOption/$(am__dirstamp) \
	EquityOption/$(DEPDIR)/$(am__dirstamp)

EquityOption/EquityOption$(EXEEXT): $(EquityOption_EquityOption_OBJECTS) $(EquityOption_EquityOption_DEPENDENCIES) $(EXTRA_EquityOption_EquityOption_DEPENDENCIES) EquityOption/$(am__dirstamp)
	@rm -f EquityOption/EquityOption$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(EquityOption_EquityOption_OBJECTS) $(EquityOption_EquityOption_LDADD) $(LIBS)
FRA/$(am__dirstamp):
	@$(MKDIR_P) FRA
	@: > FRA/$(am__dirstamp)
FRA/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) FRA/$(DEPDIR)
	@: > FRA/$(DEPDIR)/$(am__dirstamp)
FRA/FRA.$(OBJEXT): FRA/$(am__dirstamp) FRA/$(DEPDIR)/$(am__dirstamp)

FRA/FRA$(EXEEXT): $(FRA_FRA_OBJECTS) $(FRA_FRA_DEPENDENCIES) $(EXTRA_FRA_FRA_DEPENDENCIES) FRA/$(am__dirstamp)
	@rm -f FRA/FRA$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(FRA_FRA_OBJECTS) $(FRA_FRA_LDADD) $(LIBS)
FittedBondCurve/$(am__dirstamp):
	@$(MKDIR_P) FittedBondCurve
	@: > FittedBondCurve/$(am__dirstamp)
FittedBondCurve/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) FittedBondCurve/$(DEPDIR)
	@: > FittedBondCurve/$(DEPDIR)/$(am__dirstamp)
FittedBondCurve/FittedBondCurve.$(OBJEXT):  \
	FittedBondCurve/$(am__dirstamp) \
	FittedBondCurve/$(DEPDIR)/$(am__dirstamp)

FittedBondCurve/FittedBondCurve$(EXEEXT): $(FittedBondCurve_FittedBondCurve_OBJECTS) $(FittedBondCurve_FittedBondCurve_DEPENDENCIES) $(EXTRA_FittedBondCurve_FittedBondCurve_DEPENDENCIES) FittedBondCurve/$(am__dirstamp)
	@rm -f FittedBondCurve/FittedBondCurve$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(FittedBondCurve_FittedBondCurve_OBJECTS) $(FittedBondCurve_FittedBondCurve_LDADD) $(LIBS)
Gaussian1dModels/$(am__dirstamp):
	@$(MKDIR_P) Gaussian1dModels
	@: > Gaussian1dModels/$(am__dirstamp)
Gaussian1dModels/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) Gaussian1dModels/$(DEPDIR)
	@: > Gaussian1dModels/$(DEPDIR)/$(am__dirstamp)
Gaussian1dModels/Gaussian1dModels.$(OBJEXT):  \
	Gaussian1dModels/$(am__dirstamp) \
	Gaussian1dModels/$(DEPDIR)/$(am__dirstamp)

Gaussian1dModels/Gaussian1dModels$(EXEEXT): $(Gaussian1dModels_Gaussian1dModels_OBJECTS) $(Gaussian1dModels_Gaussian1dModels_DEPENDENCIES) $(EXTRA_Gaussian1dModels_Gaussian1dModels_DEPENDENCIES) Gaussian1dModels/$(am__dirstamp)
	@rm -f Gaussian1dModels/Gaussian1dModels$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(Gaussian1dModels_Gaussian1dModels_OBJECTS) $(Gaussian1dModels_Gaussian1dModels_LDADD) $(LIBS)
GlobalOptimizer/$(am__dirstamp):
	@$(MKDIR_P) GlobalOptimizer
	@: > GlobalOptimizer/$(am__dirstamp)
GlobalOptimizer/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) GlobalOptimizer/$(DEPDIR)
	@: > GlobalOptimizer/$(DEPDIR)/$(am__dirstamp)
GlobalOptimizer/GlobalOptimizer.$(OBJEXT):  \
	GlobalOptimizer/$(am__dirstamp) \
	GlobalOptimizer/$(DEPDIR)/$(am__dirstamp)

GlobalOptimizer/GlobalOptimizer$(EXEEXT): $(GlobalOptimizer_GlobalOptimizer_OBJECTS) $(GlobalOptimizer_GlobalOptimizer_DEPENDENCIES) $(EXTRA_GlobalOptimizer_GlobalOptimizer_DEPENDENCIES) GlobalOptimizer/$(am__dirstamp)
	@rm -f GlobalOptimizer/GlobalOptimizer$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(GlobalOptimizer_GlobalOptimizer_OBJECTS) $(GlobalOptimizer_GlobalOptimizer_LDADD) $(LIBS)
LatentModel/$(am__dirstamp):
	@$(MKDIR_P) LatentModel
	@: > LatentModel/$(am__dirstamp)
LatentModel/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) LatentModel/$(DEPDIR)
	@: > LatentModel/$(DEPDIR)/$(am__dirstamp)
LatentModel/LatentModel.$(OBJEXT): LatentModel/$(am__dirstamp) \
	LatentModel/$(DEPDIR)/$(am__dirstamp)

LatentModel/LatentModel$(EXEEXT): $(LatentModel_LatentModel_OBJECTS) $(LatentModel_LatentModel_DEPENDENCIES) $(EXTRA_LatentModel_LatentModel_DEPENDENCIES) LatentModel/$(am__dirstamp)
	@rm -f LatentModel/LatentModel$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(LatentModel_LatentModel_OBJECTS) $(LatentModel_LatentModel_LDADD) $(LIBS)
MarketModels/$(am__dirstamp):
	@$(MKDIR_P) MarketModels
	@: > MarketModels/$(am__dirstamp)
MarketModels/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) MarketModels/$(DEPDIR)
	@: > MarketModels/$(DEPDIR)/$(am__dirstamp)
MarketModels/MarketModels.$(OBJEXT): MarketModels/$(am__dirstamp) \
	MarketModels/$(DEPDIR)/$(am__dirstamp)

MarketModels/MarketModels$(EXEEXT): $(MarketModels_MarketModels_OBJECTS) $(MarketModels_MarketModels_DEPENDENCIES) $(EXTRA_MarketModels_MarketModels_DEPENDENCIES) MarketModels/$(am__dirstamp)
	@rm -f MarketModels/MarketModels$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(MarketModels_MarketModels_OBJECTS) $(MarketModels_MarketModels_LDADD) $(LIBS)
MulticurveBootstrapping/$(am__dirstamp):
	@$(MKDIR_P) MulticurveBootstrapping
	@: > MulticurveBootstrapping/$(am__dirstamp)
MulticurveBootstrapping/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) MulticurveBootstrapping/$(DEPDIR)
	@: > MulticurveBootstrapping/$(DEPDIR)/$(am__dirstamp)
MulticurveBootstrapping/MulticurveBootstrapping.$(OBJEXT):  \
	MulticurveBootstrapping/$(am__dirstamp) \
	MulticurveBootstrapping/$(DEPDIR)/$(am__dirstamp)

MulticurveBootstrapping/MulticurveBootstrapping$(EXEEXT): $(MulticurveBootstrapping_MulticurveBootstrapping_OBJECTS) $(MulticurveBootstrapping_MulticurveBootstrapping_DEPENDENCIES) $(EXTRA_MulticurveBootstrapping_MulticurveBootstrapping_DEPENDENCIES) MulticurveBootstrapping/$(am__dirstamp)
	@rm -f MulticurveBootstrapping/MulticurveBootstrapping$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(MulticurveBootstrapping_MulticurveBootstrapping_OBJECTS) $(MulticurveBootstrapping_MulticurveBootstrapping_LDADD) $(LIBS)
MultidimIntegral/$(am__dirstamp):
	@$(MKDIR_P) MultidimIntegral
	@: > MultidimIntegral/$(am__dirstamp)
MultidimIntegral/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) MultidimIntegral/$(DEPDIR)
	@: > MultidimIntegral/$(DEPDIR)/$(am__dirstamp)
MultidimIntegral/MultidimIntegral.$(OBJEXT):  \
	MultidimIntegral/$(am__dirstamp) \
	MultidimIntegral/$(DEPDIR)/$(am__dirstamp)

MultidimIntegral/MultidimIntegral$(EXEEXT): $(MultidimIntegral_MultidimIntegral_OBJECTS) $(MultidimIntegral_MultidimIntegral_DEPENDENCIES) $(EXTRA_MultidimIntegral_MultidimIntegral_DEPENDENCIES) MultidimIntegral/$(am__dirstamp)
	@rm -f MultidimIntegral/MultidimIntegral$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(MultidimIntegral_MultidimIntegral_OBJECTS) $(MultidimIntegral_MultidimIntegral_LDADD) $(LIBS)
Replication/$(am__dirstamp):
	@$(MKDIR_P) Replication
	@: > Replication/$(am__dirstamp)
Replication/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) Replication/$(DEPDIR)
	@: > Replication/$(DEPDIR)/$(am__dirstamp)
Replication/Replication.$(OBJEXT): Replication/$(am__dirstamp) \
	Replication/$(DEPDIR)/$(am__dirstamp)

Replication/Replication$(EXEEXT): $(Replication_Replication_OBJECTS) $(Replication_Replication_DEPENDENCIES) $(EXTRA_Replication_Replication_DEPENDENCIES) Replication/$(am__dirstamp)
	@rm -f Replication/Replication$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(Replication_Replication_OBJECTS) $(Replication_Replication_LDADD) $(LIBS)
Repo/$(am__dirstamp):
	@$(MKDIR_P) Repo
	@: > Repo/$(am__dirstamp)
Repo/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) Repo/$(DEPDIR)
	@: > Repo/$(DEPDIR)/$(am__dirstamp)
Repo/Repo.$(OBJEXT): Repo/$(am__dirstamp) \
	Repo/$(DEPDIR)/$(am__dirstamp)

Repo/Repo$(EXEEXT): $(Repo_Repo_OBJECTS) $(Repo_Repo_DEPENDENCIES) $(EXTRA_Repo_Repo_DEPENDENCIES) Repo/$(am__dirstamp)
	@rm -f Repo/Repo$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(Repo_Repo_OBJECTS) $(Repo_Repo_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)
	-rm -f BasketLosses/*.$(OBJEXT)
	-rm -f BermudanSwaption/*.$(OBJEXT)
	-rm -f Bonds/*.$(OBJEXT)
	-rm -f CDS/*.$(OBJEXT)
	-rm -f CVAIRS/*.$(OBJEXT)
	-rm -f CallableBonds/*.$(OBJEXT)
	-rm -f ConvertibleBonds/*.$(OBJEXT)
	-rm -f DiscreteHedging/*.$(OBJEXT)
	-rm -f EquityOption/*.$(OBJEXT)
	-rm -f FRA/*.$(OBJEXT)
	-rm -f FittedBondCurve/*.$(OBJEXT)
	-rm -f Gaussian1dModels/*.$(OBJEXT)
	-rm -f GlobalOptimizer/*.$(OBJEXT)
	-rm -f LatentModel/*.$(OBJEXT)
	-rm -f MarketModels/*.$(OBJEXT)
	-rm -f MulticurveBootstrapping/*.$(OBJEXT)
	-rm -f MultidimIntegral/*.$(OBJEXT)
	-rm -f Replication/*.$(OBJEXT)
	-rm -f Repo/*.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@BasketLosses/$(DEPDIR)/BasketLosses.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@BermudanSwaption/$(DEPDIR)/BermudanSwaption.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@Bonds/$(DEPDIR)/Bonds.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@CDS/$(DEPDIR)/CDS.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@CVAIRS/$(DEPDIR)/CVAIRS.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@CallableBonds/$(DEPDIR)/CallableBonds.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@ConvertibleBonds/$(DEPDIR)/ConvertibleBonds.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@DiscreteHedging/$(DEPDIR)/DiscreteHedging.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@EquityOption/$(DEPDIR)/EquityOption.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@FRA/$(DEPDIR)/FRA.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@FittedBondCurve/$(DEPDIR)/FittedBondCurve.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@Gaussian1dModels/$(DEPDIR)/Gaussian1dModels.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@GlobalOptimizer/$(DEPDIR)/GlobalOptimizer.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@LatentModel/$(DEPDIR)/LatentModel.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@MarketModels/$(DEPDIR)/MarketModels.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@MulticurveBootstrapping/$(DEPDIR)/MulticurveBootstrapping.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@MultidimIntegral/$(DEPDIR)/MultidimIntegral.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@Replication/$(DEPDIR)/Replication.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@Repo/$(DEPDIR)/Repo.Po@am__quote@ # am--include-marker

$(am__depfiles_remade):
	@$(MKDIR_P) $(@D)
	@echo '# dummy' >$@-t && $(am__mv) $@-t $@

am--depfiles: $(am__depfiles_remade)

.cpp.o:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
@am__fastdepCXX_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
@am__fastdepCXX_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.lo$$||'`;\
@am__fastdepCXX_TRUE@	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
@am__fastdepCXX_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Plo
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(LTCXXCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
	-rm -rf BasketLosses/.libs BasketLosses/_libs
	-rm -rf BermudanSwaption/.libs BermudanSwaption/_libs
	-rm -rf Bonds/.libs Bonds/_libs
	-rm -rf CDS/.libs CDS/_libs
	-rm -rf CVAIRS/.libs CVAIRS/_libs
	-rm -rf CallableBonds/.libs CallableBonds/_libs
	-rm -rf ConvertibleBonds/.libs ConvertibleBonds/_libs
	-rm -rf DiscreteHedging/.libs DiscreteHedging/_libs
	-rm -rf EquityOption/.libs EquityOption/_libs
	-rm -rf FRA/.libs FRA/_libs
	-rm -rf FittedBondCurve/.libs FittedBondCurve/_libs
	-rm -rf Gaussian1dModels/.libs Gaussian1dModels/_libs
	-rm -rf GlobalOptimizer/.libs GlobalOptimizer/_libs
	-rm -rf LatentModel/.libs LatentModel/_libs
	-rm -rf MarketModels/.libs MarketModels/_libs
	-rm -rf MulticurveBootstrapping/.libs MulticurveBootstrapping/_libs
	-rm -rf MultidimIntegral/.libs MultidimIntegral/_libs
	-rm -rf Replication/.libs Replication/_libs
	-rm -rf Repo/.libs Repo/_libs

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

# Recover from deleted '.trs' file; this should ensure that
# "rm -f foo.log; make foo.trs" re-run 'foo.test', and re-create
# both 'foo.log' and 'foo.trs'.  Break the recipe in two subshells
# to avoid problems with "make -n".
.log.trs:
	rm -f $< $@
	$(MAKE) $(AM_MAKEFLAGS) $<

# Leading 'am--fnord' is there to ensure the list of targets does not
# expand to empty, as could happen e.g. with make check TESTS=''.
am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
am--force-recheck:
	@:

$(TEST_SUITE_LOG): $(TEST_LOGS)
	@$(am__set_TESTS_bases); \
	am__f_ok () { test -f "$$1" && test -r "$$1"; }; \
	redo_bases=`for i in $$bases; do \
	              am__f_ok $$i.trs && am__f_ok $$i.log || echo $$i; \
	            done`; \
	if test -n "$$redo_bases"; then \
	  redo_logs=`for i in $$redo_bases; do echo $$i.log; done`; \
	  redo_results=`for i in $$redo_bases; do echo $$i.trs; done`; \
	  if $(am__make_dryrun); then :; else \
	    rm -f $$redo_logs && rm -f $$redo_results || exit 1; \
	  fi; \
	fi; \
	if test -n "$$am__remaking_logs"; then \
	  echo "fatal: making $(TEST_SUITE_LOG): possible infinite" \
	       "recursion detected" >&2; \
	elif test -n "$$redo_logs"; then \
	  am__remaking_logs=yes $(MAKE) $(AM_MAKEFLAGS) $$redo_logs; \
	fi; \
	if $(am__make_dryrun); then :; else \
	  st=0;  \
	  errmsg="fatal: making $(TEST_SUITE_LOG): failed to create"; \
	  for i in $$redo_bases; do \
	    test -f $$i.trs && test -r $$i.trs \
	      || { echo "$$errmsg $$i.trs" >&2; st=1; }; \
	    test -f $$i.log && test -r $$i.log \
	      || { echo "$$errmsg $$i.log" >&2; st=1; }; \
	  done; \
	  test $$st -eq 0 || exit 1; \
	fi
	@$(am__sh_e_setup); $(am__tty_colors); $(am__set_TESTS_bases); \
	ws='[ 	]'; \
	results=`for b in $$bases; do echo $$b.trs; done`; \
	test -n "$$results" || results=/dev/null; \
	all=`  grep "^$$ws*:test-result:"           $$results | wc -l`; \
	pass=` grep "^$$ws*:test-result:$$ws*PASS"  $$results | wc -l`; \
	fail=` grep "^$$ws*:test-result:$$ws*FAIL"  $$results | wc -l`; \
	skip=` grep "^$$ws*:test-result:$$ws*SKIP"  $$results | wc -l`; \
	xfail=`grep "^$$ws*:test-result:$$ws*XFAIL" $$results | wc -l`; \
	xpass=`grep "^$$ws*:test-result:$$ws*XPASS" $$results | wc -l`; \
	error=`grep "^$$ws*:test-result:$$ws*ERROR" $$results | wc -l`; \
	if test `expr $$fail + $$xpass + $$error` -eq 0; then \
	  success=true; \
	else \
	  success=false; \
	fi; \
	br='==================='; br=$$br$$br$$br$$br; \
	result_count () \
	{ \
	    if test x"$$1" = x"--maybe-color"; then \
	      maybe_colorize=yes; \
	    elif test x"$$1" = x"--no-color"; then \
	      maybe_colorize=no; \
	    else \
	      echo "$@: invalid 'result_count' usage" >&2; exit 4; \
	    fi; \
	    shift; \
	    desc=$$1 count=$$2; \
	    if test $$maybe_colorize = yes && test $$count -gt 0; then \
	      color_start=$$3 color_end=$$std; \
	    else \
	      color_start= color_end=; \
	    fi; \
	    echo "$${color_start}# $$desc $$count$${color_end}"; \
	}; \
	create_testsuite_report () \
	{ \
	  result_count $$1 "TOTAL:" $$all   "$$brg"; \
	  result_count $$1 "PASS: " $$pass  "$$grn"; \
	  result_count $$1 "SKIP: " $$skip  "$$blu"; \
	  result_count $$1 "XFAIL:" $$xfail "$$lgn"; \
	  result_count $$1 "FAIL: " $$fail  "$$red"; \
	  result_count $$1 "XPASS:" $$xpass "$$red"; \
	  result_count $$1 "ERROR:" $$error "$$mgn"; \
	}; \
	{								\
	  echo "$(PACKAGE_STRING): $(subdir)/$(TEST_SUITE_LOG)" |	\
	    $(am__rst_title);						\
	  create_testsuite_report --no-color;				\
	  echo;								\
	  echo ".. contents:: :depth: 2";				\
	  echo;								\
	  for b in $$bases; do echo $$b; done				\
	    | $(am__create_global_log);					\
	} >$(TEST_SUITE_LOG).tmp || exit 1;				\
	mv $(TEST_SUITE_LOG).tmp $(TEST_SUITE_LOG);			\
	if $$success; then						\
	  col="$$grn";							\
	 else								\
	  col="$$red";							\
	  test x"$$VERBOSE" = x || cat $(TEST_SUITE_LOG);		\
	fi;								\
	echo "$${col}$$br$${std}"; 					\
	echo "$${col}Testsuite summary"$(AM_TESTSUITE_SUMMARY_HEADER)"$${std}";	\
	echo "$${col}$$br$${std}"; 					\
	create_testsuite_report --maybe-color;				\
	echo "$$col$$br$$std";						\
	if $$success; then :; else					\
	  echo "$${col}See $(subdir)/$(TEST_SUITE_LOG)$${std}";		\
	  if test -n "$(PACKAGE_BUGREPORT)"; then			\
	    echo "$${col}Please report to $(PACKAGE_BUGREPORT)$${std}";	\
	  fi;								\
	  echo "$$col$$br$$std";					\
	fi;								\
	$$success || exit 1

check-TESTS: 
	@list='$(RECHECK_LOGS)';           test -z "$$list" || rm -f $$list
	@list='$(RECHECK_LOGS:.log=.trs)'; test -z "$$list" || rm -f $$list
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	trs_list=`for i in $$bases; do echo $$i.trs; done`; \
	log_list=`echo $$log_list`; trs_list=`echo $$trs_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) TEST_LOGS="$$log_list"; \
	exit $$?;
recheck: all 
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	bases=`for i in $$bases; do echo $$i; done \
	         | $(am__list_recheck_tests)` || exit 1; \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	log_list=`echo $$log_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) \
	        am__force_recheck=am--force-recheck \
	        TEST_LOGS="$$log_list"; \
	exit $$?
BasketLosses/BasketLosses.log: BasketLosses/BasketLosses$(EXEEXT)
	@p='BasketLosses/BasketLosses$(EXEEXT)'; \
	b='BasketLosses/BasketLosses'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
BermudanSwaption/BermudanSwaption.log: BermudanSwaption/BermudanSwaption$(EXEEXT)
	@p='BermudanSwaption/BermudanSwaption$(EXEEXT)'; \
	b='BermudanSwaption/BermudanSwaption'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
Bonds/Bonds.log: Bonds/Bonds$(EXEEXT)
	@p='Bonds/Bonds$(EXEEXT)'; \
	b='Bonds/Bonds'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
CallableBonds/CallableBonds.log: CallableBonds/CallableBonds$(EXEEXT)
	@p='CallableBonds/CallableBonds$(EXEEXT)'; \
	b='CallableBonds/CallableBonds'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
CDS/CDS.log: CDS/CDS$(EXEEXT)
	@p='CDS/CDS$(EXEEXT)'; \
	b='CDS/CDS'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
ConvertibleBonds/ConvertibleBonds.log: ConvertibleBonds/ConvertibleBonds$(EXEEXT)
	@p='ConvertibleBonds/ConvertibleBonds$(EXEEXT)'; \
	b='ConvertibleBonds/ConvertibleBonds'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
CVAIRS/CVAIRS.log: CVAIRS/CVAIRS$(EXEEXT)
	@p='CVAIRS/CVAIRS$(EXEEXT)'; \
	b='CVAIRS/CVAIRS'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
DiscreteHedging/DiscreteHedging.log: DiscreteHedging/DiscreteHedging$(EXEEXT)
	@p='DiscreteHedging/DiscreteHedging$(EXEEXT)'; \
	b='DiscreteHedging/DiscreteHedging'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
EquityOption/EquityOption.log: EquityOption/EquityOption$(EXEEXT)
	@p='EquityOption/EquityOption$(EXEEXT)'; \
	b='EquityOption/EquityOption'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
FittedBondCurve/FittedBondCurve.log: FittedBondCurve/FittedBondCurve$(EXEEXT)
	@p='FittedBondCurve/FittedBondCurve$(EXEEXT)'; \
	b='FittedBondCurve/FittedBondCurve'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
FRA/FRA.log: FRA/FRA$(EXEEXT)
	@p='FRA/FRA$(EXEEXT)'; \
	b='FRA/FRA'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
Gaussian1dModels/Gaussian1dModels.log: Gaussian1dModels/Gaussian1dModels$(EXEEXT)
	@p='Gaussian1dModels/Gaussian1dModels$(EXEEXT)'; \
	b='Gaussian1dModels/Gaussian1dModels'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
GlobalOptimizer/GlobalOptimizer.log: GlobalOptimizer/GlobalOptimizer$(EXEEXT)
	@p='GlobalOptimizer/GlobalOptimizer$(EXEEXT)'; \
	b='GlobalOptimizer/GlobalOptimizer'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
LatentModel/LatentModel.log: LatentModel/LatentModel$(EXEEXT)
	@p='LatentModel/LatentModel$(EXEEXT)'; \
	b='LatentModel/LatentModel'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
MarketModels/MarketModels.log: MarketModels/MarketModels$(EXEEXT)
	@p='MarketModels/MarketModels$(EXEEXT)'; \
	b='MarketModels/MarketModels'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
MultidimIntegral/MultidimIntegral.log: MultidimIntegral/MultidimIntegral$(EXEEXT)
	@p='MultidimIntegral/MultidimIntegral$(EXEEXT)'; \
	b='MultidimIntegral/MultidimIntegral'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
MulticurveBootstrapping/MulticurveBootstrapping.log: MulticurveBootstrapping/MulticurveBootstrapping$(EXEEXT)
	@p='MulticurveBootstrapping/MulticurveBootstrapping$(EXEEXT)'; \
	b='MulticurveBootstrapping/MulticurveBootstrapping'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
Replication/Replication.log: Replication/Replication$(EXEEXT)
	@p='Replication/Replication$(EXEEXT)'; \
	b='Replication/Replication'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
Repo/Repo.log: Repo/Repo$(EXEEXT)
	@p='Repo/Repo$(EXEEXT)'; \
	b='Repo/Repo'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
.test.log:
	@p='$<'; \
	$(am__set_b); \
	$(am__check_pre) $(TEST_LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_TEST_LOG_DRIVER_FLAGS) $(TEST_LOG_DRIVER_FLAGS) -- $(TEST_LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
@am__EXEEXT_TRUE@.test$(EXEEXT).log:
@am__EXEEXT_TRUE@	@p='$<'; \
@am__EXEEXT_TRUE@	$(am__set_b); \
@am__EXEEXT_TRUE@	$(am__check_pre) $(TEST_LOG_DRIVER) --test-name "$$f" \
@am__EXEEXT_TRUE@	--log-file $$b.log --trs-file $$b.trs \
@am__EXEEXT_TRUE@	$(am__common_driver_flags) $(AM_TEST_LOG_DRIVER_FLAGS) $(TEST_LOG_DRIVER_FLAGS) -- $(TEST_LOG_COMPILE) \
@am__EXEEXT_TRUE@	"$$tst" $(AM_TESTS_FD_REDIRECT)

distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	$(MAKE) $(AM_MAKEFLAGS) \
	  top_distdir="$(top_distdir)" distdir="$(distdir)" \
	  dist-hook
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:
	-test -z "$(TEST_LOGS)" || rm -f $(TEST_LOGS)
	-test -z "$(TEST_LOGS:.log=.trs)" || rm -f $(TEST_LOGS:.log=.trs)
	-test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-rm -f BasketLosses/$(DEPDIR)/$(am__dirstamp)
	-rm -f BasketLosses/$(am__dirstamp)
	-rm -f BermudanSwaption/$(DEPDIR)/$(am__dirstamp)
	-rm -f BermudanSwaption/$(am__dirstamp)
	-rm -f Bonds/$(DEPDIR)/$(am__dirstamp)
	-rm -f Bonds/$(am__dirstamp)
	-rm -f CDS/$(DEPDIR)/$(am__dirstamp)
	-rm -f CDS/$(am__dirstamp)
	-rm -f CVAIRS/$(DEPDIR)/$(am__dirstamp)
	-rm -f CVAIRS/$(am__dirstamp)
	-rm -f CallableBonds/$(DEPDIR)/$(am__dirstamp)
	-rm -f CallableBonds/$(am__dirstamp)
	-rm -f ConvertibleBonds/$(DEPDIR)/$(am__dirstamp)
	-rm -f ConvertibleBonds/$(am__dirstamp)
	-rm -f DiscreteHedging/$(DEPDIR)/$(am__dirstamp)
	-rm -f DiscreteHedging/$(am__dirstamp)
	-rm -f EquityOption/$(DEPDIR)/$(am__dirstamp)
	-rm -f EquityOption/$(am__dirstamp)
	-rm -f FRA/$(DEPDIR)/$(am__dirstamp)
	-rm -f FRA/$(am__dirstamp)
	-rm -f FittedBondCurve/$(DEPDIR)/$(am__dirstamp)
	-rm -f FittedBondCurve/$(am__dirstamp)
	-rm -f Gaussian1dModels/$(DEPDIR)/$(am__dirstamp)
	-rm -f Gaussian1dModels/$(am__dirstamp)
	-rm -f GlobalOptimizer/$(DEPDIR)/$(am__dirstamp)
	-rm -f GlobalOptimizer/$(am__dirstamp)
	-rm -f LatentModel/$(DEPDIR)/$(am__dirstamp)
	-rm -f LatentModel/$(am__dirstamp)
	-rm -f MarketModels/$(DEPDIR)/$(am__dirstamp)
	-rm -f MarketModels/$(am__dirstamp)
	-rm -f MulticurveBootstrapping/$(DEPDIR)/$(am__dirstamp)
	-rm -f MulticurveBootstrapping/$(am__dirstamp)
	-rm -f MultidimIntegral/$(DEPDIR)/$(am__dirstamp)
	-rm -f MultidimIntegral/$(am__dirstamp)
	-rm -f Replication/$(DEPDIR)/$(am__dirstamp)
	-rm -f Replication/$(am__dirstamp)
	-rm -f Repo/$(DEPDIR)/$(am__dirstamp)
	-rm -f Repo/$(am__dirstamp)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool \
	clean-noinstPROGRAMS mostlyclean-am

distclean: distclean-am
		-rm -f BasketLosses/$(DEPDIR)/BasketLosses.Po
	-rm -f BermudanSwaption/$(DEPDIR)/BermudanSwaption.Po
	-rm -f Bonds/$(DEPDIR)/Bonds.Po
	-rm -f CDS/$(DEPDIR)/CDS.Po
	-rm -f CVAIRS/$(DEPDIR)/CVAIRS.Po
	-rm -f CallableBonds/$(DEPDIR)/CallableBonds.Po
	-rm -f ConvertibleBonds/$(DEPDIR)/ConvertibleBonds.Po
	-rm -f DiscreteHedging/$(DEPDIR)/DiscreteHedging.Po
	-rm -f EquityOption/$(DEPDIR)/EquityOption.Po
	-rm -f FRA/$(DEPDIR)/FRA.Po
	-rm -f FittedBondCurve/$(DEPDIR)/FittedBondCurve.Po
	-rm -f Gaussian1dModels/$(DEPDIR)/Gaussian1dModels.Po
	-rm -f GlobalOptimizer/$(DEPDIR)/GlobalOptimizer.Po
	-rm -f LatentModel/$(DEPDIR)/LatentModel.Po
	-rm -f MarketModels/$(DEPDIR)/MarketModels.Po
	-rm -f MulticurveBootstrapping/$(DEPDIR)/MulticurveBootstrapping.Po
	-rm -f MultidimIntegral/$(DEPDIR)/MultidimIntegral.Po
	-rm -f Replication/$(DEPDIR)/Replication.Po
	-rm -f Repo/$(DEPDIR)/Repo.Po
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
		-rm -f BasketLosses/$(DEPDIR)/BasketLosses.Po
	-rm -f BermudanSwaption/$(DEPDIR)/BermudanSwaption.Po
	-rm -f Bonds/$(DEPDIR)/Bonds.Po
	-rm -f CDS/$(DEPDIR)/CDS.Po
	-rm -f CVAIRS/$(DEPDIR)/CVAIRS.Po
	-rm -f CallableBonds/$(DEPDIR)/CallableBonds.Po
	-rm -f ConvertibleBonds/$(DEPDIR)/ConvertibleBonds.Po
	-rm -f DiscreteHedging/$(DEPDIR)/DiscreteHedging.Po
	-rm -f EquityOption/$(DEPDIR)/EquityOption.Po
	-rm -f FRA/$(DEPDIR)/FRA.Po
	-rm -f FittedBondCurve/$(DEPDIR)/FittedBondCurve.Po
	-rm -f Gaussian1dModels/$(DEPDIR)/Gaussian1dModels.Po
	-rm -f GlobalOptimizer/$(DEPDIR)/GlobalOptimizer.Po
	-rm -f LatentModel/$(DEPDIR)/LatentModel.Po
	-rm -f MarketModels/$(DEPDIR)/MarketModels.Po
	-rm -f MulticurveBootstrapping/$(DEPDIR)/MulticurveBootstrapping.Po
	-rm -f MultidimIntegral/$(DEPDIR)/MultidimIntegral.Po
	-rm -f Replication/$(DEPDIR)/Replication.Po
	-rm -f Repo/$(DEPDIR)/Repo.Po
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am am--depfiles check check-TESTS \
	check-am clean clean-binPROGRAMS clean-generic clean-libtool \
	clean-noinstPROGRAMS cscopelist-am ctags ctags-am dist-hook \
	distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	recheck tags tags-am uninstall uninstall-am \
	uninstall-binPROGRAMS

.PRECIOUS: Makefile


dist-hook:
	for i in $(notdir $(EXAMPLES)); do \
	    cp $(srcdir)/$$i/$$i.vcxproj $(distdir)/$$i/ && \
	    cp $(srcdir)/$$i/$$i.vcxproj.filters $(distdir)/$$i/ && \
	    cp $(srcdir)/$$i/CMakeLists.txt $(distdir)/$$i/ \
	; done

.PHONY: check-examples

check-examples: $(EXAMPLES)
	for i in $(EXAMPLES); do echo "========" && echo $$i && $$i || break -1 ; done

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
